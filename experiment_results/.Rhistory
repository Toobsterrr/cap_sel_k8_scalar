dif
diff
rmse = sqrt(sum(diag(diff %*% t(diff)))/dim(diff)[1])
rmse
apply(mytrainingdata, 2, mad)
diff %*% t(diff)
diag(diff %*% t(diff))
sqrt(diag(diff %*% t(diff)))
med(sqrt(diag(diff %*% t(diff))))
median(sqrt(diag(diff %*% t(diff))))
pca_adj$loadings
pca_adj$loadings %*% t(pca_adj$loadings)
estimates_val = myvalidationdata %*% pca_adj$loadings %*% t(pca_adj$loadings)
myvalidationdata %*% pca_adj$loadings
myvalidationdata
pca_adj$loadings
myvalidationdata %*% as.matrix(pca_adj$loadings)
as.matrix(myvalidationdata) %*% as.matrix(pca_adj$loadings)
as.matrix(myvalidationdata) %*% pca_adj$loadings
as.matrix(myvalidationdata) %*% pca_adj$loadings %*% t(pca_adj$loadings)
myvalidationdata
scale(myvalidationdata, scale=apply(myvalidationdata, 2, mad), center=T)
scaled_val = scale(myvalidationdata, scale=apply(myvalidationdata, 2, mad), center=T)
scaled_val %*% pca_adj$loadings %*% t(pca_adj$loadings)
scaled_val
scaled_val[1:10,1]
estimates_val = scaled_val %*% pca_adj$loadings %*% t(pca_adj$loadings)
estimates_val{1:10}
estimates_val[1:10]
?skewness()
skewness(mydata$ECCENTRICITY)
apply(mydata, 2, skewness)
mytrainingdata$Eccentricity
mytrainingdata$ECCENTRICITY
mytrainingdata$ECCENTRICITY = ecc_tr
mydata$ECCENTRICITY
mydata$ECCENTRICITY = ecc_tr
hist(mydata)
mydata$SOLIDITY = sol_tr
?car::ellipse()
plot(c(1, 2, 3), c(5, 2, 6), color="red")
plot(c(1, 2, 3), c(5, 2, 6), colour="red")
?plot
plot(c(1, 2, 3), c(5, 2, 6), col="red")
?car::ellipse
rice_dataset <- read.csv("/home/tobias/kul/statistical_data_analysis//project_1/Rice_Dataset.csv")
mygroup <- which(rmultinom(1, 1, rep(1/4, 4)) == 1)
set.seed(0811020)
mysample <- sample(which(rice_dataset$CLASS == mygroup), 400)
mydata <- data.frame(rice_dataset[mysample, 1:10])
plot(mydata{,1})
plot(mydata[,1])
per_mina_data = mydata[c("PERIMETER", "MINOR_AXIS")]
plot(per_mina_data)
car::ellipse(colMeans(per_mina_data), cov(per_mina_data), 3.03)
car::ellipse(colMeans(per_mina_data), cov(per_mina_data), 3.03, col = "red")
car::ellipse(colMeans(per_mina_data), cov(per_mina_data), 3.03, col = "brown")
car::ellipse(colMeans(per_mina_data), cov(per_mina_data), 3.03, col = "green")
mahalanobis(colMeans(per_mina_data), cov(per_mina_data), )
mahalanobis(per_mina_data, colMeans(per_mina_data), cov(per_mina_data))
mcd50 = covMcd(per_mina_data, alpha=0.5)
library(rrcov)
mcd50 = covMcd(per_mina_data, alpha=0.5)
mcd75 = covMcd(per_mina_data, alpha=0.75)
mah = mahalanobis(per_mina_data, colMeans(per_mina_data), cov(per_mina_data))
mah50 = mahalanobis(per_mina_data, mcd50$center, mcd50$cov)
mah75 = mahalanobis(per_mina_data, mcd75$center, mcd75$cov)
plot(mah, mah50)
mytrainingdata <- mydata[1:200, ]
myvalidationdata <- mydata[201:400, ]
pca_rb = PcaHubert(mytrainingdata)
pca_rb$eigenvalues
screeplot(pca_rb)
pca_rb = PcaHubert(mytrainingdata, scale=mad)
screeplot(pca_rb)
pca_rb$eigenvalues
?PcaHubert()
pca_rb = PcaHubert(mytrainingdata)
pca_rb
pca_rb$eigenvalues
pca_rb = PcaHubert(mytrainingdata, scale=mad)
pca_rb$eigenvalues
pca_rb$rank
pca_rb$eig0
screeplot(pca_rb)
sum(pca_rb$eig0)
(pca_rb$eig0[1] + pca_rb$eig0[2] + pca_rb$eig0[3]) sum(pca_rb$eig0)
(pca_rb$eig0[1] + pca_rb$eig0[2] + pca_rb$eig0[3])/sum(pca_rb$eig0)
(pca_rb$eig0[1] + pca_rb$eig0[2])/sum(pca_rb$eig0)
screeplot(pca_rb, lines)
screeplot(pca_rb, type=lines)
screeplot(pca_rb, type="lines")
biplot(pca_rb, choices=1:2)
biplot(pca_rb, choices=1:3)
?biplot()
biplot(pca_rb, choices=c(1,3))
biplot(pca_rb, choices=c(1,2))
pca_rb$loadings
pca_rb = PcaHubert(mytrainingdata, scale=mad, k=3)
pca_rb$loadings
biplot(pca_rb, choices=c(1,3))
biplot(pca_rb, choices=1:3
)
biplot(pca_rb, choices=1:3)
biplot(pca_rb, choices=1:2)
biplot(pca_rb, choices=1:3)
biplot(pca_rb, choices=1:3)
biplot(pca_rb, choices=c(1,3))
?corrplot::corrplot()
corrplot::corrplot(corr(mytrainingdata)
)
cor(mytrainingdata)
corrplot::corrplot(cor(mytrainingdata)
)
corrplot::corrplot(cor(mytrainingdata))
?cor
corrplot::corrplot(pca_rb$loadings)
corrplot::corrplot(pca_rb$loadings, is.cor=F)
pca_adj = PcaHubert(mytrainingdata_adj, scale=mad)
indexes = which(pca_rb$od < pca_rb$cutoff.od)
mytrainingdata_adj = mytrainingdata[indexes,]
pca_adj = PcaHubert(mytrainingdata_adj, scale=mad)
corrplot::corrplot(pca_rb$loadings, is.cor=F)
corrplot::corrplot(pca_adj$loadings, is.cor=F)
pca_adj = PcaHubert(mytrainingdata_adj, scale=mad, k=2)
corrplot::corrplot(pca_adj$loadings, is.cor=F)
pca_rb
mytrainingdata_adj
pca_adj = PcaHubert(mytrainingdata_adj, scale=mad, k=3)
corrplot::corrplot(pca_adj$loadings, is.cor=F)
corrplot::corrplot.mixed(pca_adj$loadings, is.cor=F)
corrplot::corrplot(pca_adj$loadings, is.cor=F)
corrplot::corrplot(pca_adj$loadings)
corrplot::corrplot(pca_adj$loadings, is.cor=F)
corrplot::corrplot(pca_rb$loadings, is.cor=F)
corrplot::corrplot(pca_adj$loadings, is.cor=F)
pca_rb = PcaHubert(mytrainingdata)
screeplot(pca_rb)
set.seed(0811020) # use your student number instead of 0012345
rice_dataset <- read.csv("Rice_Dataset.csv")
set.seed(0811020) # use your student number instead of 0012345
mygroup <- which(rmultinom(1, 1, rep(1/4, 4)) == 1)
mysample <- sample(which(rice_dataset$CLASS == mygroup), 400)
mydata <- data.frame(rice_dataset[mysample, 1:10])
lambda = car::powerTransform(ecc ~ 1)$lambda
ecc = mydata$ECCENTRICITY
sol = mydata$SOLIDITY
aspr = mydata$ASPECT_RATIO
lambda = car::powerTransform(ecc ~ 1)$lambda
ecc_tr = car::bcPower(ecc, lambda)
lambda = car::powerTransform(ecc ~ 1)$lambda
sol_tr = car::bcPower(sol, lambda)
mydata$ECCENTRICITY = ecc_tr
mydata$SOLIDITY = sol_tr
mytrainingdata <- mydata[1:200, ]
myvalidationdata <- mydata[201:400, ]
# Your code here
pca_rb = PcaHubert(mytrainingdata)
screeplot(pca_rb)
screeplot(pca_adj)
screeplot(pca_rb)
?prcomp
data = cbind(c(1, 2), c(2, 1))
data
cov(data)
data = cbind(c(1, 3), c(3, 1))
cov(data)
data = cbind(c(1, 1), c(1, 3))
cov(data)
you
?fitdistr
library(ksv)
library(pheatmap)
install.packages(pheatmap)
install.packages("pheatmap")
library(pheatmap)
?pheatmap
?table
iris
iris[,5]
iris[,-5]
iris[,5]
iris[,6]
iris[,1]
iris[,-1]
iris
iris[,-1]
iris[,-2]
iris[,-5]
pa = pam(iris[,-5], 3)
library(cluster)
pa = pam(iris[,-5], 3)
pa
summary(pa)
pa$cluster
iris[,5]
table(iris[,5], pa$cluster)
pa$data
pa$clustering
iris[,-5]
iris[,5]
pa$clustering
?order
pa$cluster
order(pa$cluster)
pa.diss
pa$diss
pa$diss
plot(silhouette(pa))
colors.obs
?pheatmap
iris[order(pa$cluster), 1:4]
pa
pa$data
x = c(-3, -2, -1, 0, 1, 2, 3)
x
y = x^2 - 3
y
plot(y, x)
plot(x, y)
rnorm(7, 0, 1)
rnorm(7, 0, .3)
rnorm(7, 0, .5)
y_b = y + rnorm(0, 0.5)
plot(x, y_b)
plot(x, y_b, col="red")
plot(x, y_b, col="red")
x
y_b = y + rnorm(7, 0, 0.5)
plot(x, y_b, col="red")
plot(x, y)
ppoints(x, y_b, col="red")
points(x, y_b, col="red")
y_real = y
y = y_b
y_b
X = cbind(c(1, 1, 1, 1, 1, 1, 1), )
y_real
y_xsq = y_real + 3
y_xsq
plot(y, y_xsq)
cos(x)
plot(x, cos(x))
x = range(-3, 3, 10)
x
?range
x = -3:3
x
x = -3:0.5:3
x
seq(-3, 3, 0.5)
seq(-3, 3, 0.1)
x = seq(-3, 3, 0.1)
cos(x)
plot(x, cos(x))
x = seq(-3, 5, 0.1)
plot(x, cos(x))
x = seq(-3, 6, 0.1)
plot(x, cos(x))
plot(x, x^2)
plot(x, x^2 + cos(x))
plot(x, x + cos(x))
plot(x, x + 3cos(x))
plot(x, x + 3*cos(x))
x = seq(-5, 8, 0.1)
plot(x, x + 3*cos(x))
seq(1, 1, 10)
seq(1, 1)
rep(1, 10)
dim(x)
length((x))
length(x)
x
rep(1, 131)
X = cbind(rep(1, 131), x, cos(x))
X
plot(x, x + cos(x))
plot(x, x + 3*cos(x))
plot(x, 0.3*x + 3*cos(x))
plot(x, 0.6*x + 3*cos(x))
X
y_real = 0.6*x + 3*cos(x)
plot(x, y_real)
y = y_real + rnorm(131, 0, 0.5)
points(x, y, col="red")
y = y_real + rnorm(131, 0, 0.7)
points(x, y, col="red")
y = y_real + rnorm(131, 0, 1)
points(x, y, col="red")
plot(y, X[,2])
plot(y, X[,3])
X %*% solve(t(X) %*% X) %*% t(X) %*% Y
X %*% solve(t(X) %*% X) %*% t(X) %*% y
y_b = X %*% solve(t(X) %*% X) %*% t(X) %*% y
points(x, y_b)
points(x, y_b, col="green")
plot(x, y)
points(x, y_b, col="green")
x = seq(-100, 100, 0.5)
y_real = 0.6*x + 0.3*cos(x)
points(x, y_real)
plot(x, y_real)
x = seq(-10, 10, 0.5)
y_real = 0.6*x + 0.3*cos(x)
plot(x, y_real)
y_real = 0.6*x + 0.7*cos(x)
plot(x, y_real)
y_real = 0.6*x + 0.9*cos(x)
plot(x, y_real)
x = seq(-10, 10, 0.1)
y_real = 0.6*x + 0.9*cos(x)
plot(x, y_real)
y = y_real + rnom(length(x), 0, 1)
y = y_real + rnorm(length(x), 0, 1)
points(x, y)
plot(x, cos(x))
plot(y, cos(x))
plot(y, x)
plot(y, cos(x))
l = length(x)
X = cbind(rep(1, l), x)
X
y_b = X %*% solve(t(X), X) %*% t(X) %*% y
y_b = X %*% solve(t(X) %*% X) %*% t(X) %*% y
plot(x, y_b)
plot(x, y-y_b)
plot(y-y_b, cos(x))
plot(x, y-y_b)
X2 = X
X2[,2] = cos(x)
X2
X2 %*% solve(t(X2) %*% X2) %*% t(X2) %*% (y-y_b)
y_b2 = X2 %*% solve(t(X2) %*% X2) %*% t(X2) %*% (y-y_b)
plot(x, y_b2)
points(x, y_b2, col="red")
plot(x, y_b2)
plot(x, y-y_b)
points(x, y_b2, col="red")
solve(t(X2) %*% X2) %*% t(X2) %*% (y-y_b)
solve(t(X) %*% X) %*% t(X) %*% y
plot(x, y-y_b+y_b2)
plot(x, y_b+y_b2)
points(x, y, col="red")
rnorm(100, 5, 34)
data rnorm(100, 5, 34)
data = rnorm(100, 5, 34)
qnorm(100, 5, 34)
?qnorm
qnorm(ppoints(100), 5, 34)
ppoints(100)
qnorm(ppoints(100), 5, 34)
qqplot(qnorm(ppoints(100), 5, 34), data)
data
?qqplot
plot(qnorm(ppoints(100), 5, 34), data)
order(c(4, 1, 6, 7, 2))
?order
sort(c(4, 1, 6, 7, 2))
qqplot(qnorm(ppoints(100), 5, 34), data)
points(qnorm(ppoints(100), 5, 34), sort(data), col="red")
qqplot(qnorm(ppoints(100), 5, 34), data)
qqplot(qnorm(ppoints(100), 5, 34), 5*data)
qqplot(qnorm(ppoints(100), 5, 34), 50*data)
qqplot(5*qnorm(ppoints(100), 5, 34), data)
qqplot(qnorm(ppoints(100), 5, 34), data)
qqplot(qnorm(ppoints(100), 5, 34), seq(1, 100))
qqplot(qnorm(ppoints(100), 5, 34), 7*seq(1, 100))
qqplot(qnorm(ppoints(100), 5, 34), seq(1, 1000, 10))
qqplot(qnorm(ppoints(100), 5, 34), seq(1, 1000))
qqplot(qnorm(ppoints(100), 5, 34), seq(1, 100))
qqplot(seq(-100, 100), seq(-100, 100)^2)
plot(data)
plot(sort(data))
plot(qnorm(ppoints(100), 5, 34))
hist(qnorm(ppoints(100), 5, 34))
plot(seq(1, 100))
hist(seq(1, 100))
qqplot(seq(-100, 100), seq(-100, 100)^2)
qqplot(seq(-100, 100), seq(-100, 100)^3)
qqplot(seq(-100, 100), seq(-100, 100)^2)
alpha = pi/6
A = cbind(c(cos(alpha), sin(alpha)), c(-sin(alpha), cos(alpha)))
A
p = c(1, 1)
p
A %*% p
p_t = A %*% p
solve(A)
solve(A) %*% p_t
p_t %*% A
t(p_t) %*% A
A
solve(A)
alpha = pi/5.4
alpha = pi/3.4
A = cbind(c(cos(alpha), sin(alpha)), c(-sin(alpha), cos(alpha)))
A
solve(A)
B = rbind(c(1, 4, 8), c(4, 2, 4))
B
B %*% p
p
B %*% c(1, 1, 1)
B = rbind(c(1, 0, 1), c(0, 1, 1))
B %*% c(1, 1, 1)
C = cbind(c(1, 1), c(cos(pi/6), sin(pi/6)))
C
p
C %*% p
y = c(0, 1, 1.5)
x = c(1, 0, 1.866025)
y = c(0, 1, 1, 1.5)
x = c(1, 0, 1, 1.866025)
plot(x, y)
points(cos(pi/60), sin(pi/6), col="red")
points(cos(pi/60), sin(pi/6), col="red")
?points
points(cos(pi/60), sin(pi/6), col="red", type="l")
points(cos(pi/60), sin(pi/6), col="red", type="b")
C
C = cbind(c(1, 0), c(cos(pi/6), sin(pi/6)))
C %*% p
y = c(0, 1, 1, 0.5)
plot(x, y)
setwd(~/tmp/results2)
setwd("~/tmp/results2")
policy_cpu_normal_1 = read.delim("policy/cpu/normal/1", sep="\n")
policy_cpu_normal_1 = read.delim("policy/cpu/normal/1/success.dat", sep="\n")
success_policy_cpu_normal_1 = read.delim("policy/cpu/normal/1/success.dat", sep="\n")
delete(policy_cpu_normal_1)
remove(policy_cpu_normal_1)
success_policy_cpu_normal_1 = read.delim("policy/cpu/normal/1/success.dat", sep="\n")
success_policy_cpu_normal_2 = read.delim("policy/cpu/normal/2/success.dat", sep="\n")
success_policy_mem_normal_2 = read.delim("policy/mem/normal/2/success.dat", sep="\n")
success_policy_mem_normal_1 = read.delim("policy/mem/normal/1/success.dat", sep="\n")
success_policy_cpu_aggressive_1 = read.delim("policy/cpu/aggressive/1/success.dat", sep="\n")
success_policy_cpu_aggressive_2 = read.delim("policy/cpu/aggressive/2/success.dat", sep="\n")
success_policy_mem_aggressive_2 = read.delim("policy/mem/aggressive/2/success.dat", sep="\n")
success_policy_mem_aggressive_1 = read.delim("policy/mem/aggressive/1/success.dat", sep="\n")
X = cbind(c(1, 1, 2, 2, 2, 4, 1, 3, 2, 2, 1, 4), c(1, 1, 2, 2, 2, 4, 1, 3, 2, 2, 1, 4))
hist(X)
hists(X)
hist.data.frame(X)
library("Hmisc")
hist.data.frame(X)
?as.frame()
as.frame()?
sd
as.frame?
c
as.data.frame()?
df
as.data.frame(X)
as.data.frame(success_policy_cpu_aggressive_1, success_policy_cpu_normal_2)
hist(success_policy_cpu_aggressive_1); hist(success_policy_cpu_aggressive_2)
hist(success_policy_cpu_aggressive_1, n=100)
hist(success_policy_cpu_aggressive_1, breaks=100)
hist(success_policy_cpu_aggressive_1, breaks=1000)
hist(success_policy_cpu_aggressive_1, breaks=10000)
hist?
s
?hist
hist(success_policy_cpu_aggressive_1, breaks=10)
hist(success_policy_cpu_aggressive_1, breaks=1)
?hist
hist(success_policy_cpu_aggressive_1, breaks=100)
hist(success_policy_cpu_aggressive_1, breaks=1000)
hist(success_policy_cpu_aggressive_1, breaks=1000000000)
plot(success_policy_cpu_aggressive_1)
plot(as.matrix(success_policy_cpu_aggressive_1))
as.data.frame(success_policy_cpu_aggressive_1, success_policy_cpu_aggressive_2)
abline(v=15*20)
v_normal = 15*20
v_1 = 15*20
remove(v_normal)
v_1 = 15*20
v_2 = 15*60
success_policy_cpu_aggressive_1 = as.martix(success_policy_cpu_aggressive_1)
success_policy_cpu_aggressive_1 = as.matrix(success_policy_cpu_aggressive_1)
success_policy_cpu_aggressive_1 = as.matrix(success_policy_cpu_aggressive_1)
success_policy_cpu_aggressive_2 = as.matrix(success_policy_cpu_aggressive_2)
success_policy_cpu_normal_2 = as.matrix(success_policy_cpu_normal_2)
success_policy_cpu_normal_1 = as.matrix(success_policy_cpu_normal_1)
success_policy_mem_aggressive_1 = as.matrix(success_policy_mem_aggressive_1)
success_policy_mem_aggressive_2 = as.matrix(success_policy_mem_aggressive_2)
success_policy_mem_normal_2 = as.matrix(success_policy_mem_normal_2)
success_policy_mem_normal_1 = as.matrix(success_policy_mem_normal_1)
remove(X)
View(success_policy_cpu_aggressive_1)
View(success_policy_cpu_aggressive_2)
View(success_policy_cpu_aggressive_1)
View(success_policy_cpu_aggressive_1)
View(success_policy_cpu_aggressive_1)
View(success_policy_cpu_aggressive_1)
View(success_policy_cpu_aggressive_1)
View(success_policy_cpu_normal_1)
View(success_policy_cpu_normal_1)
v1
v_1
v1 = v_1
v2 = v_2
v1
v2
plot(success_policy_cpu_normal_1)
abline(v=v1)
plot(success_policy_cpu_aggressive_1)
abline(v=v1)
plot(success_policy_mem_aggressive_1)
abline(v=v1)
plot(success_policy_mem_normal_1)
abline(v=v1)
success_no_policy_cpu_normal_1 = read.delim("no_policy/cpu/normal/1/success.dat", sep="\n")
